name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ==============================================================================
  # Tests de sécurité et qualité
  # ==============================================================================
  security-tests:
    name: Tests de Sécurité
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Récupère tout l'historique pour TruffleHog

    - name: Scan des secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
      continue-on-error: true  # Ne bloque pas si TruffleHog échoue

    - name: Analyse de sécurité avec Snyk
      if: ${{ secrets.SNYK_TOKEN != '' }}
      uses: snyk/actions/php@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # ==============================================================================
  # Tests Laravel
  # ==============================================================================
  laravel-tests:
    name: Tests Laravel
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: policify_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring, zip

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Prepare Laravel Application
      run: |
        php -r "file_exists('.env') || copy('.env.example', '.env');"
        php artisan key:generate
        php artisan config:cache

    - name: Create Database
      run: |
        mysql -u root -proot -e 'CREATE DATABASE IF NOT EXISTS policify_test;'

    - name: Run Migrations
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: policify_test
        DB_USERNAME: root
        DB_PASSWORD: root
      run: php artisan migrate --force

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: policify_test
        DB_USERNAME: root
        DB_PASSWORD: root
      run: vendor/bin/phpunit

  # ==============================================================================
  # Build Docker Image
  # ==============================================================================
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-tests, laravel-tests]
    if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        target: production
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/policify:latest
          ${{ secrets.DOCKER_USERNAME }}/policify:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ==============================================================================
  # Déploiement AWS (optionnel)
  # ==============================================================================
  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Deploy to ECS
      run: |
        # Ici vous pourrez ajouter vos commandes de déploiement AWS ECS/EKS
        echo "Déploiement AWS à configurer selon votre infrastructure"
